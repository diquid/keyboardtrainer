# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'typewindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# набрать на скорость (ограничение по времени)
# фоновая музыка
# картинки котиков

# считывание файлов, сравнение символов, проверка таблицы рекордов

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtMultimedia
from PyQt5.QtMultimedia import QMediaPlayer, QMediaContent, QSound
from PyQt5.QtCore import QUrl
import random
import time
import datetime
import os
from shutil import get_terminal_size
import difflib as df
from aftertype import *
from timer import *
from save import *
from recordtable import *
from operator import itemgetter
import pickle

class Ui_MainWindow1(object): 

    def __init__(self):
        super().__init__()
        self.elapsed_timer = QtCore.QElapsedTimer()

    def aftertype(self):
        self.Dialog = QtWidgets.QDialog()
        self.ui = Ui_Dialog3()
        self.ui.setup3(self.Dialog)
        self.Dialog.show()

    def play(self):
        self.player.play()

    def pause(self):
        self.player.pause()

    def funcstart(self):
        self.textread()
        self.settimer()
        self.speedcount()

    #def timer(self):
    #    time1 = time.addSecs()
    #    return (time1.toString("hh:mm:ss"))

    def speedcount(self):
        time1 = time.time()
        symbolscount = len(self.textEdit.toPlainText())
        speed = symbolscount / time1
        time1 += 1
        self.label_4.setText("Скорость набора:" + str(speed))

    def textread(self):
        with open('baza.txt') as f:
            line_count = 0
            for line in f:
                line_count += 1
        random1 = random.randint(1, line_count)
        textf = open('baza.txt').readlines()
        length_textf = len(textf)
        refline = textf[random1 - 1]
        self.textEdit_2.setText(refline)
        self.pushButton.setEnabled(False)

    def settimer(self):
        self.elapsed_timer.start()

    def show_timer_text(self):
        self.label_5.setText("Прошло времени:")

    def saveresults(self):
        tableresults.append()
        tableresults = [null] * 11
        tableresults = sorted(tableresults, key = itemgetter(1), reverse=True)[:10]

        with open('results.txt') as findresults:
            pickle.load(findresults)
        tableresults = sorted(tableresults, key = itemgetter(1), reverse=True)[:10]

    def errorscount(self):
        time1 = time.time()
        time2 = 0
        refline = self.textEdit_2.toPlainText()
        typedline = self.textEdit.toPlainText()
        errors = 0
        index = 0
        typespeed = 0
        totaltime = 0
        current_text =""
        current_symbol = ""
        for i in typedline:
            try:
                if (index == len(refline)-1): 
                    time2 = time.time()
                if ((refline[index] != typedline[index])):
                    errors += 1
                    #current_symbol =  typedline[index]
                    #self.editor.setStyleSheet("QTextEdit {color:red}")
                    #current_text = self.textEdit_2.toPlainText()
                    #previous_html = self.textEdit_2.toHtml()
                    self.textEdit.setTextColor( QtGui.QColor( "red" ))
                else: 
                    #self.textEdit.setText('')
                    self.textEdit.setTextColor( QtGui.QColor( "green" ) )
                    #self.textEdit_2.append( current_text)
                index += 1
                totaltime = time2 - time1
                if (totaltime > 0):
                    typespeed = (len(typedline) - errors)/totaltime
                elif (totaltime < 0):
                    totaltime = totaltime * (-1)
                    typespeed = (len(typedline) - errors)/totaltime
            except IndexError as e:
                self.aftertype()
                time2 = time.time()
        self.label_3.setText("Количество ошибок: " + str(errors))
        #self.label_4.setText("Скорость набора:" + str(typespeed))
        self.label_5.setText("Прошло времени:" + str(totaltime))


    def setup1(self, MainWindow):
        #refline = self.textread()

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 830)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(20, 330, 961, 201))
        self.textEdit.setObjectName("textEdit") #ввод
        self.textEdit.textChanged.connect(self.errorscount)

        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(20, 10, 961, 201))
        self.textEdit_2.setObjectName("textEdit_2") #текст
        
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 300, 311, 21))
        font = QtGui.QFont()
        font.setFamily("Courier New")
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")

        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(20, 280, 961, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")

        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(20, 540, 961, 16))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")

        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(20, 590, 951, 23))
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 560, 191, 21))
        font = QtGui.QFont()
        font.setFamily("Courier New")
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")

        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(50, 630, 500, 31))
        font = QtGui.QFont()
        font.setFamily("Courier New")
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")

        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(330, 630, 250, 31))
        font = QtGui.QFont()
        font.setFamily("Courier New")
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")

        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(50, 680, 800, 31))
        font = QtGui.QFont()
        font.setFamily("Courier New")
        font.setPointSize(12)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(350, 230, 281, 41))
        font = QtGui.QFont()
        font.setFamily("Courier New")
        font.setPointSize(12)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.funcstart)  
        #self.pushButton.clicked.connect(lambda: self.textEdit_2.append(refline))        
        #self.pushButton.setEnabled(False)


        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1000, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)


        self.playbutton = QtWidgets.QPushButton(self.centralwidget)
        self.playbutton.setGeometry(QtCore.QRect(830, 700, 50, 50))
        font = QtGui.QFont()
        font.setFamily("Courier New")
        font.setPointSize(14)
        self.playbutton.setFont(font)
        self.playbutton.setObjectName("playbutton")
        self.playbutton.clicked.connect(self.play)


        self.pausebutton = QtWidgets.QPushButton(self.centralwidget)
        self.pausebutton.setGeometry(QtCore.QRect(900, 700, 50, 50))
        font = QtGui.QFont()
        font.setFamily("Courier New")
        font.setPointSize(14)
        self.pausebutton.setFont(font)
        self.pausebutton.setObjectName("pausebutton")
        self.pausebutton.clicked.connect(self.pause)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Ваш текст:"))
        self.label_2.setText(_translate("MainWindow", "Прогресс ввода:"))
        self.label_3.setText(_translate("MainWindow", "Количество ошибок:"))
        self.label_4.setText(_translate("MainWindow", "Скорость набора:"))
        self.label_5.setText(_translate("MainWindow", "Прошло времени:"))
        self.pushButton.setText(_translate("MainWindow", "Показать текст"))
        self.playbutton.setText(_translate("MainWindow", "►"))
        self.pausebutton.setText(_translate("MainWindow", "◼"))


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow1()
    ui.setup1(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
